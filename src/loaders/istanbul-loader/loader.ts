import webpack = require('webpack');

const { createInstrumenter } = require('istanbul-lib-instrument');

/**
 * Take a source file and run it through istanbul for instrumentation
 *
 * @param {string} content the source code
 * @param {object} sourceMap The source map object
 */
export default function (this: webpack.LoaderContext, content: string, sourceMap?: any) {
	const callback = this.async();

	const instrumenter = createInstrumenter({
		produceSourceMap: true,
		esModules: true
	});

	/*
	For the code coverage to work we need to modify the sources in the source map to point back to the original file.
	The files coming in have been generated by webpack and look like,
	"node_modules/tslint-loader?!path/to/file/css-modules!path/to/file.ts. We need these files to simply
	be "path/to/file.ts".
	 */
	if (sourceMap && sourceMap.sources) {
		sourceMap.sources = sourceMap.sources.map((source: string) => {
			const lastExclaim = source.lastIndexOf('!');
			if (lastExclaim !== -1) {
				return source.substr(lastExclaim + 1);
			}
			return source;
		});
	}

	instrumenter.instrument(content, this.resourcePath, (error: Error, instrumentedSource: string) => {
		callback(null, instrumentedSource, instrumenter.lastSourceMap());
	}, sourceMap);
}
